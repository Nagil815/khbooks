<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="book">

	<resultMap type="dto.BookDTO" id="book_and_author" autoMapping="false" >
		<result column="bno" property="bno" />
		<result column="bname" property="bname" />
		<result column="gno" property="gno" />
		<result column="bupdate" property="bupdate" />
		<result column="bgrade" property="bgrade" />
		<result column="bview" property="bview" />
		<result column="bthumb" property="bthumb" />
		<result column="binfo" property="binfo" />
		<collection property="aList" javaType="java.util.List"
			ofType="dto.AuthorDTO"  autoMapping="false" >
			<id column="auno" property="auno" />
			<result column="auname" property="auname" />
			<result column="auintro" property="auintro" />
		</collection>
	</resultMap>

	<select id="bookSearchList" parameterType="dto.BookPageDTO" resultMap="book_and_author">
		select rownum, bc.*
		from(select DENSE_RANK() OVER (
		<choose>
			<when test="sortkey==1">
				order by ac.bupdate desc, ac.bno desc
			</when>
			<when test="sortkey==2">
				order by ac.bgrade desc, ac.bno desc
			</when>
			<when test="sortkey==3">
				order by ac.bview desc, ac.bno desc
			</when>
			<otherwise>
				order by ac.bno desc
			</otherwise>
		</choose>
		) rm, ac.*
		from(select b.*, a.*
		from  book b, book_author ba, author a
		where b.bno=ba.bno
		and a.auno=ba.auno
		and ba.bno in (
		            select bno 
		            from book 
		            where bname like '%' || #{searchWord} || '%'
		)
		or b.bno=ba.bno
		and a.auno=ba.auno
		and ba.auno in (
		            select auno 
		            from author 
		            where auname like '%' || #{searchWord} || '%'
		)
		<choose>
			<when test="sortgenre != 0">
				and gno = #{sortgenre}
			</when>
		</choose>
		)ac)bc
		<![CDATA[where bc.rm>=#{startRow} and bc.rm <=#{endRow}]]>
	</select>
	
	<select id="bookSearchCount" parameterType="string" resultType="int">
		select count(DISTINCT b.bno)
		from  book b, book_author ba, author a
		where b.bno=ba.bno
		and a.auno=ba.auno
		and ba.bno in (
		            select bno 
		            from book 
		            where bname like '%' || #{searchWord} || '%'
		)
		or b.bno=ba.bno
		and a.auno=ba.auno
		and ba.auno in (
		            select auno 
		            from author 
		            where auname like '%' || #{searchWord} || '%'
		)
		<choose>
			<when test="sortgenre != 0">
				and gno = #{sortgenre}
			</when>
		</choose>
	</select>
	
	<select id="bookList" parameterType="dto.BookPageDTO" resultType="dto.BookDTO">
		select rownum, b.*
		from(select rownum as rm, a.*
		from(select * from book
		<choose>
			<when test="sortgenre != 0">
				where gno = #{sortgenre}
			</when>
		</choose>
		<!-- 정렬방식 -->
		<choose>
			<when test="sortkey==1">
				order by bupdate desc<!-- 날짜 순 -->
			</when>
			<when test="sortkey==2">
				order by bgrade desc<!-- 점수 순 -->
			</when>
			<when test="sortkey==3">
				order by bview desc<!-- 조회수 순 -->
			</when>
		</choose>
		)a)b
		<![CDATA[where b.rm>=#{startRow} and b.rm <=#{endRow}]]>
	</select>
	
	<select id="bookCount" resultType="int">
		select count(*) from book
	</select>
	
	<select id="bookGenreCount" parameterType="int" resultType="int">
		select count(*) from book where gno = #{sortgenre}
	</select>
	
	<select id="bookGenre" parameterType="int" resultType="String">
		select g.gname from genre g, book b where b.bno = #{bno} and g.gno=b.gno
	</select>
	
	<insert id="BookIns" parameterType="dto.BookDTO">
		insert into book
		values(book_bno_seq.nextval, #{bname}, #{gno}, sysdate, 0, 0, #{bthumb}, #{binfo})
	</insert>
	
	<select id="bookDetail" parameterType="int" resultMap="book_and_author">
		select b.*, a.*
		from  book b, book_author ba, author a
		where ba.bno = #{bno}
		and a.auno=ba.auno
		and b.bno=ba.bno
	</select>
	
	<select id="serialList" parameterType="int" resultType="dto.SerialDTO">
		select upno, stitle from serial
		where bno=#{bno}
		order by upno desc
	</select>
	
	<select id="genreList" resultType="dto.GenreDTO">
		select * from genre order by gno
	</select>
	
	<select id="authorBook" parameterType="java.util.Map" resultType="dto.BookDTO">
		select rownum, c.*
		from(select rownum as rm, a.*
		from(select b.bno, b.bname, b.gno
		from  book b, book_author ba
		where ba.auno = #{auno}
		and b.bno=ba.bno and b.bno!=#{bno})a)c
		<![CDATA[where c.rm>=1 and c.rm <=3 ]]>
	</select>

</mapper>